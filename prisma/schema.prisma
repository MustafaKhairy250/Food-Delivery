// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  RESTAURANT
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  PREPARING
  DELIVERED
  CANCELED
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  role       Role
  phone      String
  addresses  Address[]
  orders     Order[]
  restaurant Restaurant[] @relation("RestaurantOwner")
  createdAt  DateTime     @default(now())
}

model Address {
  id      Int     @id @default(autoincrement())
  street  String
  city    String
  country String
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
  Order   Order[]
}

model Restaurant {
  id        Int        @id @default(autoincrement())
  name      String
  address   String
  ownerId   Int
  owner     User       @relation("RestaurantOwner", fields: [ownerId], references: [id])
  menuItem  MenuItem[]
  orders    Order[]    @relation("RestaurantOrders")
  createdAt DateTime   @default(now())
}

model MenuItem {
  id           Int         @id @default(autoincrement())
  name         String
  describtion  String
  price        Float
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItem    OrderItem[]
  createdAt    DateTime    @default(now())
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  restaurantId    Int
  addressId       Int
  status          Status      @default(PENDING)
  total           Float
  deliveryAddress Address     @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  user            User        @relation(fields: [userId], references: [id])
  restaurant      Restaurant  @relation("RestaurantOrders", fields: [restaurantId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  menuItemId Int
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}
